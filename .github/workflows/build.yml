name: Build and push image to Docker Hub

on:
  schedule:
    - cron: "30 18 * * *"

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_tag.outputs.tag }}
    env:
      repo: bojand/ghz
    steps:
      - name: Get latest tag if more recent than latest DockerHub tag
        id: get_tag
        run: |
          get_latest() {
            local tag=$(/usr/bin/curl --silent "${{ github.api_url }}/repos/${{ env.repo }}/releases/latest" | /usr/bin/jq -r .tag_name)
          }


          echo "::set-output name=test::$(get_latest)"
  
  docker:
    if: needs.check.outputs.tag != ''
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Cache Docker build layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          builder: ${{ steps.buildx.outputs.name }}
          tags:  ${{ github.repository }}:${{ needs.check.outputs.tag }},${{ github.repository }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          build-args: APP_VERSION=${{ needs.check.outputs.tag }}
